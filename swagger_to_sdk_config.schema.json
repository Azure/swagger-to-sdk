{
  "$schema": "http://json-schema.org/draft-04/schema",
  "type": "object",
  "properties": {
    "$schema": {
      "enum": [
        "https://raw.githubusercontent.com/lmazuel/swagger-to-sdk/master/swagger_to_sdk_config.schema.json"
      ]
    },
    "meta": {
      "type": "object",
      "properties": {
        "version": {
          "enum": [
            "0.2.0"
          ],
          "description": "The version must be 0.2.0"
        },
        "after_scripts": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "description": "List of commands to execute after the generation is done. Will be executed in the order of the list. Current working directory will be the cloned path. See also \"envs\" node."
        },
        "autorest_options": {
          "$ref": "#/definitions/autorest_options"
        },
        "envs": {
          "type": "object",
          "patternProperties": {
            "sdkrel:.*": {
              "type": "string",
              "description": "All options prefixed by \"sdkrel:\" can be a relative path that will be solved against SDK folder before being sent to Autorest."
            }
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "description": "Environment variables for after_scripts. All options prefixed by \"sdkrel:\" can be a relative path that will be solved against SDK folder before being sent to the scripts."
        },
        "advanced_options": {
          "type": "object",
          "properties": {
            "clone_dir": {
              "type": "string",
              "minLength": 1,
              "description": "Add more layers of folders to clone the repo, if necessary. Right now, useful for Go only. \"sdkrel:\" will consider this as the final folder path."
            }
          },
          "patternProperties": {
            "sdkrel:.*": {
              "$ref": "#/definitions/sdkrelProperty"
            }
          },
          "description": ""
        },
        "wrapper_filesOrDirs": {
          "$ref": "#/definitions/wrapper_filesOrDirs"
        },
        "delete_filesOrDirs": {
          "$ref": "#/definitions/delete_filesOrDirs"
        },
        "generated_relative_base_directory": {
          "$ref": "#/definitions/generated_relative_base_directory"
        }
      },
      "additionalProperties": false,
      "required": [
        "version"
      ]
    },
    "projects": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "markdown": {
            "type": "string",
            "minLength": 1,
            "description": "This is an optional parameter which specificy the Autorest MD file path for this project. This is relative to the rest-folder paramter."
          },
          "autorest_options": {
            "$ref": "#/definitions/autorest_options"
          },
          "wrapper_filesOrDirs": {
            "$ref": "#/definitions/wrapper_filesOrDirs"
          },
          "delete_filesOrDirs": {
            "$ref": "#/definitions/delete_filesOrDirs"
          },
          "generated_relative_base_directory": {
            "$ref": "#/definitions/generated_relative_base_directory"
          },
          "output_dir": {
            "type": "string",
            "minLength": 1,
            "description": "This is the folder in your SDK repository where you want to put the generated files."
          },
          "build_dir": {
            "type": "string",
            "minLength": 1,
            "description": "This is an optional folder where to put metadata about the generation (Autorest version, date of generation, etc.). This can be used by our monitoring system to detect package that needs an update. Be sure this folder is unique in the entire file, to avoid overwritting a file from another project."
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "description": "It's a dict where keys are a project id. The project id has no constraint, but it's recommended to use namespace style, like \"datalake.store.account\" to provide the best flexibility for the --project parameter."
    }
  },
  "additionalProperties": false,
  "required": [
    "meta"
  ],
  "definitions": {
    "autorest_options": {
      "properties": {
        "license-header": {
          "type": "string",
          "minLength": 1,
          "description": "An option that will be passed to autorest."
        },
        "payload-flattening-threshold": {
          "type": "number",
          "minimum": 1,
          "description": "An option that will be passed to autorest."
        },
        "azure-arm": {
          "type": "boolean",
          "description": "An option that will be passed to autorest."
        }
      },
      "patternProperties": {
        "sdkrel:.*": {
          "$ref": "#/definitions/sdkrelProperty"
        }
      },
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string",
            "description": "An option that will be passed to autorest."
          },
          {
            "type": "boolean",
            "description": "An option that will be passed to autorest."
          },
          {
            "type": "number",
            "description": "An option that will be passed to autorest."
          }
        ]
      },
      "description": "An optional dictionary of options you want to pass to Autorest. This will be passed in any call, but can be override by \"autorest_options\" in each data. Note that you CAN'T override \"--output-folder\" which is filled contextually. All options prefixed by \"sdkrel:\" can be a relative path that will be solved against SDK folder before being sent to Autorest."
    },
    "wrapper_filesOrDirs": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "A file/directory that will be kept from the generated SDK."
      },
      "description": "An optional list of files/directory to keep when we generate new SDK. This support a Bash-like wildcard syntax (i.e. '*/myfile?.py'). This applies to every Swagger files."
    },
    "delete_filesOrDirs": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "A file/directory that will be deleted from the generated SDK."
      },
      "description": "An optional list of files/directory to delete from the generated SDK. This support a Bash-like wildcard syntax (i.e. '*/myfile?.py') This applies to every Swagger files."
    },
    "generated_relative_base_directory": {
      "type": "string",
      "minLength": 1,
      "description": "If the data to consider generated by Autorest are not directly in the root folder. For instance, if Autorest generates a networkclient folder and you want to consider this folder as the root of data. This parameter is applied before 'delete_filesOrDirs', consider it in your paths. This applies to every Swagger files."
    },
    "sdkrelProperty": {
      "type": "string",
      "description": "All options prefixed by \"sdkrel:\" can be a relative path that will be solved against SDK folder before being sent to Autorest."
    }
  }
}